#+TITLE: Cornerwise: Server Setup
#+AUTHOR: Code for Boston
#+OPTIONS: toc:nil


* Running the Server

  We're using Docker (and eventually docker-compose), because it ensures
  that we're all working with the same environment. In essence, Docker
  is a tool for managing lightweight Linux machines.

  If you follow the instructions below, you will have the necessary
  dependencies, including Postgres w/GIS extensions and Django 1.8.

** Docker Installation

*** OS X and Windows
- [[https://www.docker.com/toolbox][Install Docker Toolbox]] (Windows and Mac)
  The Toolbox includes VirtualBox, Docker Machine, and Docker Compose. On
  Windows, it also includes MinGW (w/a Unix-like shell), Git, and some
  other handy tools.
  ![Docker ToolBox](images/docker_toolbox.png)

*** Linux
- [[https://docs.docker.com/engine/installation/linux/ubuntulinux/][Intall Docker Engine]]
  You can try ~apt-get install docker.io~, but make sure you're running a recent
  version (>1.10)
- [[https://docs.docker.com/compose/install/][Install Docker Compose]]

** Startup

  Note: On Linux, you'll typically have to run all ~docker~ commands, including
  ~docker-compose~ with ~sudo~. This is due to the fact that the Docker daemon
  must run as root, and the client communicates with it over a socket owned by
  root. (You can add your user to the ~docker~ group to avoid having to type
  ~sudo~.)

- (OS X and Windows) Launch the *Docker Quickstart Terminal*. This will
  provision a new ~default~ Docker Machine if one does not already exist and set
  up some environment variables for communicating with that machine. See
  instructions below if you prefer to do this step manually, or in another
  terminal.

- ~cd path/to/cornerwise~

- ~docker-compose up~
  1. When you first run ~up~, Compose will retrieve some pre-built images from
     Docker Hub and then build the ~cornerwise~ image. It is normal for these steps
     to take a few minutes.

  2. Once the images have been built and the containers started, you should see
     something like:
     ~cornerwise_1  | Starting development server at http://0.0.0.0:4000/~

  3. Keep this window open

- (OS X and Windows) Determine the IP address of the machine by running
  ~docker-machine ip default~, then open a browser to http://*ip-address*:4000/.
  (On Mac, you can run ~open http://$(docker-machine ip default):4000~ or set up
  port forwarding by following the instructions below.)

- (Linux) Open a browser to http://localhost:4000/.

- In the original window, press Ctrl-C to shut down the application.

*** Without Quickstart Terminal (/optional/)
To create a Machine manually:

- ~docker-machine create -d virtualbox dev~
  Where ~dev~ is the name of the container

- ~eval $(docker-machine env dev)~
  Sets up some environment variables for communicating with a running machine
  named ~dev~.

*** Port Forwarding (OS X) (/optional/)
If you'd like to be able to access the site at http://localhost:4000:

- ~VBoxManage controlvm default natpf1 cornerwise,tcp,127.0.0.1,4000,,4000~
  - ~default~ :: name of the Docker Machine
  - 4000 (first occurrence) :: host port
  - 4000 (second occurrence) :: VM port

*** Production
- ~docker-compose up -f docker-compose.yml -f docker-compose.prod.yml~

** Interacting with Containers
- (OS X/Windows) Launch *Docker Quickstart Terminal*
- ~cd path/to/cornerwise~
- ~docker-machine exec cornerwise bash~

* API Credentials

  Many of the features of Cornerwise require the application to communicate with
  third-party APIs. To get them working, you'll need to set up accounts with the
  appropriate vendors. All of them offer services that are free at the volume we
  deal with (certainly, more than needed for the purposes of local development.)

** Setup

  Rename ~server/cornerwise/local_settings.example.py~ to ~local_settings.py~
  and replace the values there.

  Certain Google applications require [[https://developers.google.com/identity/protocols/application-default-credentials][default credentials]].  Rename the
  credentials ~json~ file to ~google_credentials.json~ and move it to
  ~server/cornerwise~.

* Troubleshooting
If the script hangs while fetching a new image (~Using default tag:
latest~), or if url fetches hang inside the container, it may be an
issue with the VM's networking. I'm not sure exactly what causes it,
but you can fix it by running ~docker-machine restart dev~ in a
fresh terminal window.

* Docker Native
Docker also has native clients for Mac and Windows that make it easier to
interact with containers. At the time of this writing (June 2016), the native
apps are in public beta, but they are likely to become the preferred approach
to using Docker on those platforms. The instructions above are mostly unchanged,
except that the ~docker-machine~ instructions are no longer necessary, and
container ports are automatically forwarded to `localhost`.

* Production
** Differences
Deploying to production differs in a few ways:
1. The webserver, not Django, is responsible for serving static assets. This
   should be configured in, e.g., nginx.
2. Changes to application code are not automatically loaded, since the contents
   of ~server/~ are copied when the image is built, not when the container
   starts. You must run ~docker-compose build~ first.
3. It uses [[http://gunicorn.org][gunicorn]] instead of the built-in development webserver and serves
   from port 4000 instead of 3000.
** Running
1. ~docker-compose -f docker-compose.yml -f docker-compose.prod.yml up~
* Starting Fresh
To start over with a clean database, cd to the the project directory and run
`docker-compose down -v`. This will shut down the running containers and delete
them. It will also delete all of the named volumes and any data they may
contain.
* Uninstalling
** Stop and Remove Containers (Old workflow):

#+BEGIN_SRC bash
eval $(docker-machine env dev)
container_ids=$(docker ps -a --filter="ancestor=bdsand/cornerwise" | awk '{ print $1 }')
docker stop $container_ids
docker rm $container_ids
#+END_SRC
** Stop and Remove Containers
- In the ~cornerwise~ directory, run ~docker-compose down~
** Remove the image:

#+BEGIN_SRC bash
docker rmi bdsand/cornerwise
#+END_SRC
